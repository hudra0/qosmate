#!/bin/sh /etc/rc.common

START=99
STOP=99

USE_PROCD=1

EXTRA_COMMANDS="auto_setup auto_setup_noninteractive expand_config validate_custom_rules"
EXTRA_HELP="        auto_setup      Automatically configure qosmate
        auto_setup_noninteractive   Automatically configure qosmate with no interaction
        expand_config   Expand the configuration with all possible options
        validate_custom_rules    Validate custom rules"

service_triggers() {
    procd_add_reload_trigger "qosmate" "network" "firewall"
}

load_config() {
    config_load 'qosmate'
    config_get_bool enabled global 'enabled' 0
    config_get WAN settings 'WAN' 'eth1'
}

validate_custom_rules() {
    local tmp_file="/tmp/qosmate_custom_rules_validation.txt"
    local rules_file="/etc/qosmate.d/custom_rules.nft"

    if [ ! -f "$rules_file" ]; then
        echo "Custom rules file not found." | tee "$tmp_file"
        return 1
    fi

    nft_output=$(nft --check --file "$rules_file" 2>&1)
    nft_exit_code=$?

    echo "$nft_output" | tee "$tmp_file"

    if [ $nft_exit_code -eq 0 ]; then
        echo "Custom rules validation successful." | tee -a "$tmp_file"
        return 0
    else
        echo "Custom rules validation failed." | tee -a "$tmp_file"
        return 1
    fi
}

migrate_config() {
    CONFIG_FILE="/etc/config/qosmate"

    # Check for and correct the custom_rules section
    if grep -q "config qosmate 'custom_rules'" $CONFIG_FILE; then
        echo "Incorrect custom_rules section found. Correcting..."
        sed -i "s/config qosmate 'custom_rules'/config custom_rules 'custom_rules'/" $CONFIG_FILE
        echo "custom_rules section corrected."
    fi

    # Remove duplicate custom_rules sections if both incorrect and correct versions exist
    if grep -q "config qosmate 'custom_rules'" $CONFIG_FILE && grep -q "config custom_rules 'custom_rules'" $CONFIG_FILE; then
        echo "Both incorrect and correct custom_rules sections found. Removing the incorrect one..."
        sed -i "/config qosmate 'custom_rules'/d" $CONFIG_FILE
        echo "Incorrect custom_rules section removed."
    fi
}

manage_custom_rules_file() {
    local action="$1"
    
    case "$action" in
        create)
            # Ensure the directory exists
            [ ! -d "/etc/qosmate.d" ] && mkdir -p "/etc/qosmate.d"

            # Create the file if it doesn't exist
            [ ! -f "/etc/qosmate.d/custom_rules.nft" ] && touch "/etc/qosmate.d/custom_rules.nft"

            ;;
        delete)
            # Not used at the moment...
            rm -f "/etc/qosmate.d/custom_rules.nft"
            ;;
    esac
}

start_service() {
    migrate_config
    load_config

    # Check if enabled
    if [ "$enabled" == 0 ]; then
        return
    fi

    # Update the status
    uci_set qosmate global status 1
    uci_commit qosmate

    # Save the current WAN interface to a temporary file
    echo "$WAN" > /tmp/qosmate_wan

    # Create custom rules file if it doesn't exist
    manage_custom_rules_file create
    nft -f /etc/qosmate.d/custom_rules.nft

    /etc/qosmate.sh
    /etc/init.d/firewall reload
    logger -t qosmate "Service started"
}

stop_service() {
    load_config

    # Check if enabled
    if [ "$enabled" == 0 ]; then
        uci_set qosmate global status 0
        uci_commit qosmate
    fi

    # Read the old WAN interface from the temporary file
    OLD_WAN=$(cat /tmp/qosmate_wan 2>/dev/null)
    if [ -z "$OLD_WAN" ]; then
        # If the temporary file doesn't exist, fall back to WAN from config
        OLD_WAN="$WAN"
    fi

    logger -t qosmate "Stopping service qosmate..."

    # Remove custom rules table
    nft delete table inet qosmate_custom 2>/dev/null

    ## Delete files
    rm -f /usr/share/nftables.d/ruleset-post/dscptag.nft

    ## Delete the old qdiscs and IFB associated with the old WAN interface
    tc qdisc del dev $OLD_WAN root > /dev/null 2>&1
    tc qdisc del dev ifb-$OLD_WAN root > /dev/null 2>&1
    tc qdisc del dev $OLD_WAN ingress > /dev/null 2>&1

    # Remove IFB interface
    ip link del ifb-$OLD_WAN 2>/dev/null

    nft delete table inet dscptag

    # Remove the temporary file
    rm -f /tmp/qosmate_wan

    # Reload services
    logger -t qosmate "Reloading services..."

    /etc/init.d/network reload
    /etc/init.d/firewall reload

    logger -t qosmate "Service stopped"
}

reload_service() {
    stop
    start
}

status_service() {
    # Load configuration
    load_config

    # Function to extract default values from the main script
    get_default_value() {
        local var_name=$1
        local default_value=$(grep "^$var_name=" /etc/qosmate.sh | cut -d'=' -f2- | tr -d '"')
        echo "$default_value"
    }

    # Function to get current value or default
    get_current_or_default() {
        local uci_path=$1
        local default_value=$2
        local value=$(uci -q get $uci_path)
        if [ -z "$value" ]; then
            echo "$default_value (Default value)"
        else
            echo "$value"
        fi
    }

    # Extract default values
    DEFAULT_WAN=$(get_default_value "DEFAULT_WAN")
    DEFAULT_DOWNRATE=$(get_default_value "DEFAULT_DOWNRATE")
    DEFAULT_UPRATE=$(get_default_value "DEFAULT_UPRATE")
    DEFAULT_GAMEQDISC=$(get_default_value "gameqdisc")

    echo "==== qosmate Status ===="

    # Check if the service is enabled
    if [ "$enabled" == 1 ]; then
        echo "qosmate service is enabled."
    else
        echo "qosmate service is not enabled."
    fi

    # Check if traffic shaping is active
    WAN=$(uci -q get qosmate.settings.WAN || echo "$DEFAULT_WAN")
    IFB="ifb-$WAN"

    if tc qdisc show dev $WAN 2>/dev/null | grep -q "qdisc cake"; then
        if [ "$enabled" == 1 ]; then
            echo "Traffic shaping is active on the egress interface ($WAN)."
        else
            echo "Default CAKE qdisc is active on the egress interface ($WAN), but qosmate is not managing it."
        fi
    elif tc qdisc show dev $WAN 2>/dev/null | grep -q "qdisc hfsc"; then
        echo "Traffic shaping (HFSC) is active on the egress interface ($WAN)."
    else
        echo "No qosmate traffic shaping is active on the egress interface ($WAN)."
    fi

    if tc qdisc show dev $IFB 2>/dev/null | grep -q "qdisc cake\|qdisc hfsc"; then
        echo "Traffic shaping is active on the ingress interface ($IFB)."
    else
        echo "Traffic shaping is not active on the ingress interface ($IFB)."
    fi

    echo "==== Overall Status ===="
    # Determine if the service is actually running
    if [ "$enabled" == 1 ] && { tc qdisc show dev $WAN 2>/dev/null | grep -q "qdisc hfsc" || tc qdisc show dev $IFB 2>/dev/null | grep -q "qdisc cake\|qdisc hfsc"; }; then
        echo "qosmate is currently active and managing traffic shaping."
    else
        echo "qosmate is not currently active or managing traffic shaping."
    fi

    echo "==== Current Settings ===="
    # Show summary of current settings
    echo "Upload rate: $(get_current_or_default qosmate.settings.UPRATE "$DEFAULT_UPRATE") kbps"
    echo "Download rate: $(get_current_or_default qosmate.settings.DOWNRATE "$DEFAULT_DOWNRATE") kbps"
    
    # For GAMEUP and GAMEDOWN, we need to evaluate the expressions
    UPRATE=$(uci -q get qosmate.settings.UPRATE || echo "$DEFAULT_UPRATE")
    DOWNRATE=$(uci -q get qosmate.settings.DOWNRATE || echo "$DEFAULT_DOWNRATE")
    DEFAULT_GAMEUP=$((UPRATE*15/100+400))
    DEFAULT_GAMEDOWN=$((DOWNRATE*15/100+400))

    echo "Game traffic upload: $(get_current_or_default qosmate.hfsc.GAMEUP "$DEFAULT_GAMEUP") kbps"
    echo "Game traffic download: $(get_current_or_default qosmate.hfsc.GAMEDOWN "$DEFAULT_GAMEDOWN") kbps"
    if [ "$(get_current_or_default qosmate.settings.ROOT_QDISC "hfsc")" = "cake" ]; then
        echo "Queue discipline: CAKE (Root qdisc)"
    else
        echo "Queue discipline: $(get_current_or_default qosmate.hfsc.gameqdisc "$DEFAULT_GAMEQDISC") (for game traffic in HFSC)"
    fi

    echo
    echo "==== Detailed Technical Information ===="
    echo "Traffic Control (tc) Queues:"
    tc -s qdisc

    echo
    echo "==== Nftables Ruleset (dscptag) ===="
    nft list ruleset | grep 'chain dscptag' -A 100


    echo
    echo "==== Custom Rules Table Status ===="
    if nft list table inet qosmate_custom &>/dev/null; then
        echo "Custom rules table (qosmate_custom) is active."
        echo "Current custom rules:"
        nft list table inet qosmate_custom
    else
        echo "Custom rules table (qosmate_custom) is not active or doesn't exist."
    fi

}

auto_setup() {
    echo "Starting qosmate auto-setup..."

    # Stop qosmate if it's running
    if /etc/init.d/qosmate status > /dev/null; then
        echo "Stopping qosmate for accurate speed test results..."
        /etc/init.d/qosmate stop
        sleep 5  # Give some time for the network to stabilize
    fi

    # Detect WAN interface
    WAN_INTERFACE=$(ifstatus wan | grep -e '"device"' | cut -d'"' -f4)
    L3_DEVICE=$(ifstatus wan | grep -e '"l3_device"' | cut -d'"' -f4)
    
    if [ -z "$WAN_INTERFACE" ] && [ -z "$L3_DEVICE" ]; then
        echo "Error: Unable to detect WAN interface. Please set it manually in the configuration."
        return 1
    fi

    FINAL_INTERFACE=${L3_DEVICE:-$WAN_INTERFACE}
    echo "Detected WAN interface: $FINAL_INTERFACE"

    sed -i "/option WAN/c\    option WAN '$FINAL_INTERFACE'" /etc/config/qosmate

    if [ $? -ne 0 ]; then
        echo "Error: Failed to update WAN interface in configuration. Please check the file /etc/config/qosmate"
        return 1
    fi

    echo "Do you want to run a speed test or enter speeds manually? [test/manual]"
    read -r speed_choice

    if [[ "$speed_choice" =~ ^[Mm]anual$ ]]; then
        echo "Please enter your download speed in Mbit/s:"
        read -r DOWNLOAD_SPEED
        echo "Please enter your upload speed in Mbit/s:"
        read -r UPLOAD_SPEED
    else
        echo "This will run a speed test to configure qosmate. Do you want to continue? [y/N]"
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            echo "Auto-setup cancelled."
            return 0
        fi

        # Check for speedtest-go first
        if command -v speedtest-go &> /dev/null; then
            echo "speedtest-go is already installed. Using it for the speed test."
            SPEEDTEST_CMD="speedtest-go"
        else
            echo "speedtest-go is not found. Checking for python3-speedtest-cli..."
            if command -v speedtest &> /dev/null; then
                echo "python3-speedtest-cli is already installed. Using it for the speed test."
                SPEEDTEST_CMD="speedtest --simple"
            else
                echo "Neither speedtest-go nor python3-speedtest-cli is installed. Attempting to install speedtest-go..."
                
                # Check for sufficient space (adjust the required space as needed)
                FREE_SPACE=$(df /overlay | awk 'NR==2 {print $4}')
                if [ "$FREE_SPACE" -lt 15360 ]; then  # Assuming 15MB for speedtest-go
                    echo "Not enough space for speedtest-go. Attempting to install python3-speedtest-cli instead..."
                else
                    opkg update && opkg install speedtest-go
                    if [ $? -eq 0 ]; then
                        SPEEDTEST_CMD="speedtest-go"
                    else
                        echo "Failed to install speedtest-go. Attempting to install python3-speedtest-cli instead..."
                    fi
                fi

                # If speedtest-go installation failed or there wasn't enough space, try python3-speedtest-cli
                if [ -z "$SPEEDTEST_CMD" ]; then
                    if [ "$FREE_SPACE" -lt 1024 ]; then  # 1MB for python3-speedtest-cli
                        echo "Error: Not enough free space to install any speedtest tool."
                        echo "Auto-setup cannot continue. Please free up some space and try again."
                        return 1
                    fi
                    opkg update && opkg install python3-speedtest-cli python3-speedtest-cli-src
                    if [ $? -eq 0 ]; then
                        SPEEDTEST_CMD="speedtest --simple"
                    else
                        echo "Failed to install python3-speedtest-cli. Auto-setup cannot continue."
                        return 1
                    fi
                fi
            fi
        fi

        echo "Running speed test... This may take a few minutes."
        SPEED_RESULT=$($SPEEDTEST_CMD)
        
        if [ "$SPEEDTEST_CMD" = "speedtest-go" ]; then
            DOWNLOAD_SPEED=$(echo "$SPEED_RESULT" | grep "Download:" | grep -oE '[0-9]+\.[0-9]+' | head -n1)
            UPLOAD_SPEED=$(echo "$SPEED_RESULT" | grep "Upload:" | grep -oE '[0-9]+\.[0-9]+' | head -n1)
        else
            DOWNLOAD_SPEED=$(echo "$SPEED_RESULT" | grep "Download:" | awk '{print $2}')
            UPLOAD_SPEED=$(echo "$SPEED_RESULT" | grep "Upload:" | awk '{print $2}')
        fi
    fi

    echo "Speed test results:"
    echo "Download speed: $DOWNLOAD_SPEED Mbit/s"
    echo "Upload speed: $UPLOAD_SPEED Mbit/s"

    # Convert speeds to kbps and apply 90% rule
    DOWNRATE=$(awk -v speed="$DOWNLOAD_SPEED" 'BEGIN {print int(speed * 1000 * 0.9)}')
    UPRATE=$(awk -v speed="$UPLOAD_SPEED" 'BEGIN {print int(speed * 1000 * 0.9)}')

    echo "QoS configuration:"
    echo "DOWNRATE: $DOWNRATE kbps (90% of measured download speed)"
    echo "UPRATE: $UPRATE kbps (90% of measured upload speed)"
    
    sed -i "/option WAN/c\    option WAN '$FINAL_INTERFACE'" /etc/config/qosmate
    sed -i "/option DOWNRATE/c\    option DOWNRATE '$DOWNRATE'" /etc/config/qosmate
    sed -i "/option UPRATE/c\    option UPRATE '$UPRATE'" /etc/config/qosmate

    echo "Configuration updated. New settings:"
    grep -E "option (WAN|DOWNRATE|UPRATE)" /etc/config/qosmate

    # Section for gaming device IP
    echo "Would you like to add a gaming device IP for prioritization? [y/N]"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        echo "Please enter the IP address of your gaming device:"
        read -r gaming_ip

        # Validate IP address format
        if [[ $gaming_ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            # Check if rules for this IP already exist
            if grep -q "option src_ip '$gaming_ip'" /etc/config/qosmate || grep -q "option dest_ip '$gaming_ip'" /etc/config/qosmate; then
                echo "Rules for IP $gaming_ip already exist. Skipping addition of new rules."
            else
                # Add the rules to the configuration file
                cat << EOF >> /etc/config/qosmate

config rule
    option name 'Game_Console_Outbound'
    option proto 'udp'
    option src_ip '$gaming_ip'
    list dest_port '!=80'
    list dest_port '!=443'
    option class 'cs5'
    option counter '1'

config rule
    option name 'Game_Console_Inbound'
    option proto 'udp'
    option dest_ip '$gaming_ip'
    list src_port '!=80'
    list src_port '!=443'
    option class 'cs5'
    option counter '1'
EOF
                echo "Gaming device rules added for IP: $gaming_ip"
            fi
        else
            echo "Invalid IP address format. No gaming device rules added."
        fi
    else
        echo "No gaming device IP added."
    fi

    echo "Auto-setup complete. qosmate has been configured with detected settings."
    echo "To apply these changes, please restart qosmate by running: /etc/init.d/qosmate restart"
}

auto_setup_noninteractive() {
    local gaming_ip="$1"
    local output_file="/tmp/qosmate_auto_setup_output.txt"
    {
    echo "Starting qosmate non-interactive auto-setup..."

    # Stop qosmate if it's running
    if /etc/init.d/qosmate status > /dev/null; then
        echo "Stopping qosmate for accurate speed test results..."
        /etc/init.d/qosmate stop
        sleep 5  # Give some time for the network to stabilize
    fi

    # Detect WAN interface
    WAN_INTERFACE=$(ifstatus wan | grep -e '"device"' | cut -d'"' -f4)
    L3_DEVICE=$(ifstatus wan | grep -e '"l3_device"' | cut -d'"' -f4)

    if [ -z "$WAN_INTERFACE" ] && [ -z "$L3_DEVICE" ]; then
        echo "Error: Unable to detect WAN interface. Please set it manually in the configuration."
        return 1
    fi

    FINAL_INTERFACE=${L3_DEVICE:-$WAN_INTERFACE}
    echo "Detected WAN interface: $FINAL_INTERFACE"

    sed -i "/option WAN/c\    option WAN '$FINAL_INTERFACE'" /etc/config/qosmate

    if [ $? -ne 0 ]; then
        echo "Error: Failed to update WAN interface in configuration. Please check the file /etc/config/qosmate"
        return 1
    fi

    # Check for speedtest-go first
    if command -v speedtest-go &> /dev/null; then
        echo "speedtest-go is already installed. Using it for the speed test."
        SPEEDTEST_CMD="speedtest-go"
    else
        echo "speedtest-go is not found. Checking for python3-speedtest-cli..."
        if command -v speedtest &> /dev/null; then
            echo "python3-speedtest-cli is already installed. Using it for the speed test."
            SPEEDTEST_CMD="speedtest --simple"
        else
            echo "Neither speedtest-go nor python3-speedtest-cli is installed. Attempting to install speedtest-go..."
            
            # Check for sufficient space (adjust the required space as needed)
            FREE_SPACE=$(df /overlay | awk 'NR==2 {print $4}')
            if [ "$FREE_SPACE" -lt 15360 ]; then  # Assuming 15MB for speedtest-go
                echo "Not enough space for speedtest-go. Attempting to install python3-speedtest-cli instead..."
            else
                opkg update && opkg install speedtest-go
                if [ $? -eq 0 ]; then
                    SPEEDTEST_CMD="speedtest-go"
                else
                    echo "Failed to install speedtest-go. Attempting to install python3-speedtest-cli instead..."
                fi
            fi

            # If speedtest-go installation failed or there wasn't enough space, try python3-speedtest-cli
            if [ -z "$SPEEDTEST_CMD" ]; then
                if [ "$FREE_SPACE" -lt 1024 ]; then  # 1MB for python3-speedtest-cli
                    echo "Error: Not enough free space to install any speedtest tool."
                    echo "Auto-setup cannot continue. Please free up some space and try again."
                    return 1
                fi
                opkg update && opkg install python3-speedtest-cli python3-speedtest-cli-src
                if [ $? -eq 0 ]; then
                    SPEEDTEST_CMD="speedtest --simple"
                else
                    echo "Failed to install python3-speedtest-cli. Auto-setup cannot continue."
                    return 1
                fi
            fi
        fi
    fi

    echo "Running speed test... This may take a few minutes."
    SPEED_RESULT=$($SPEEDTEST_CMD)

    if [ "$SPEEDTEST_CMD" = "speedtest-go" ]; then
        DOWNLOAD_SPEED=$(echo "$SPEED_RESULT" | grep "Download:" | grep -oE '[0-9]+\.[0-9]+' | head -n1)
        UPLOAD_SPEED=$(echo "$SPEED_RESULT" | grep "Upload:" | grep -oE '[0-9]+\.[0-9]+' | head -n1)
    else
        DOWNLOAD_SPEED=$(echo "$SPEED_RESULT" | grep "Download:" | awk '{print $2}')
        UPLOAD_SPEED=$(echo "$SPEED_RESULT" | grep "Upload:" | awk '{print $2}')
    fi

    echo "Speed test results:"
    echo "Download speed: $DOWNLOAD_SPEED Mbit/s"
    echo "Upload speed: $UPLOAD_SPEED Mbit/s"

    # Convert speeds to kbps and apply 90% rule
    DOWNRATE=$(awk -v speed="$DOWNLOAD_SPEED" 'BEGIN {print int(speed * 1000 * 0.9)}')
    UPRATE=$(awk -v speed="$UPLOAD_SPEED" 'BEGIN {print int(speed * 1000 * 0.9)}')

    echo "QoS configuration:"
    echo "DOWNRATE: $DOWNRATE kbps (90% of measured download speed)"
    echo "UPRATE: $UPRATE kbps (90% of measured upload speed)"

    sed -i "/option DOWNRATE/c\    option DOWNRATE '$DOWNRATE'" /etc/config/qosmate
    sed -i "/option UPRATE/c\    option UPRATE '$UPRATE'" /etc/config/qosmate

    echo "Configuration updated. New settings:"
    grep -E "option (WAN|DOWNRATE|UPRATE)" /etc/config/qosmate

    # Add gaming device IP if provided
    if [ -n "$gaming_ip" ]; then
        if [[ $gaming_ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            # Check if rules for this IP already exist
            if grep -q "option src_ip '$gaming_ip'" /etc/config/qosmate || grep -q "option dest_ip '$gaming_ip'" /etc/config/qosmate; then
                echo "Rules for IP $gaming_ip already exist. Skipping addition of new rules."
            else
                # Add the rules to the configuration file
                cat << EOF >> /etc/config/qosmate

config rule
    option name 'Game_Console_Outbound'
    option proto 'udp'
    option src_ip '$gaming_ip'
    list dest_port '!=80'
    list dest_port '!=443'
    option class 'cs5'
    option counter '1'

config rule
    option name 'Game_Console_Inbound'
    option proto 'udp'
    option dest_ip '$gaming_ip'
    list src_port '!=80'
    list src_port '!=443'
    option class 'cs5'
    option counter '1'
EOF
                echo "Gaming device rules added for IP: $gaming_ip"
            fi
        else
            echo "Invalid IP address format. No gaming device rules added."
        fi
    fi

    echo "Auto-setup complete. qosmate has been configured with detected settings."
    echo "To apply these changes, please restart qosmate by running: /etc/init.d/qosmate restart"
    
    } > "$output_file" 2>&1
    echo "$output_file"
}

expand_config() {
    local config_file="/etc/config/qosmate"
    local main_script="/etc/qosmate.sh"
    
    echo "Expanding qosmate configuration with all possible options..."

    # Ensure all sections exist
    for section in global settings advanced hfsc cake custom_rules; do
        if ! grep -q "config $section '$section'" "$config_file"; then
            echo >> "$config_file"  # Add a newline before the new section
            echo "config $section '$section'" >> "$config_file"
            echo "Added section: $section"
        fi
    done

    # Function to get default value from main script
    get_default_value() {
        local option="$1"
        local default_value

        # Map options to their DEFAULT_ counterparts
        case "$option" in
            OH) option="DEFAULT_OH" ;;
            WAN) option="DEFAULT_WAN" ;;
            DOWNRATE) option="DEFAULT_DOWNRATE" ;;
            UPRATE) option="DEFAULT_UPRATE" ;;
        esac

        # First, try to find a direct assignment
        default_value=$(grep "^${option}=" "$main_script" | cut -d'=' -f2- | tr -d '"')

        # If not found, look for it in the load_config function
        if [ -z "$default_value" ]; then
            default_value=$(sed -n "/load_config()/,/}/p" "$main_script" | grep "\<${option}=" | sed 's/.*|| echo "\(.*\)".*/\1/')
        fi

        # Remove any remaining shell expansions and trim whitespace
        default_value=$(echo "$default_value" | sed -e 's/\$([^)]*)//g' -e 's/^ *//g' -e 's/ *$//g' -e 's/\${{.*}}//g')

        # Check for dynamic calculations and return empty string if found
        if echo "$default_value" | grep -qE '[[($]|\)$'; then
            echo ""
        else
            echo "$default_value"
        fi
    }
    # Define options for each section
    add_options() {
        local section="$1"
        shift
        for option in "$@"; do
            if ! grep -q "option $option" "$config_file"; then
                default_value=$(get_default_value "$option")
                sed -i "/config $section/a\\    option $option '$default_value'" "$config_file"
                echo "Added option $option to section $section with value: $default_value"
            fi
        done
    }

    # Add options for each section
    add_options global enabled
    add_options settings WAN DOWNRATE UPRATE ROOT_QDISC
    add_options advanced PRESERVE_CONFIG_FILES WASHDSCPUP WASHDSCPDOWN BWMAXRATIO ACKRATE UDP_RATE_LIMIT_ENABLED UDPBULKPORT TCPBULKPORT VIDCONFPORTS REALTIME4 REALTIME6 LOWPRIOLAN4 LOWPRIOLAN6 TCP_UPGRADE_ENABLED MSS NFT_HOOK NFT_PRIORITY
    add_options hfsc LINKTYPE OH gameqdisc GAMEUP GAMEDOWN nongameqdisc nongameqdiscoptions MAXDEL PFIFOMIN PACKETSIZE netemdelayms netemjitterms netemdist pktlossp
    add_options cake COMMON_LINK_PRESETS OVERHEAD MPU LINK_COMPENSATION ETHER_VLAN_KEYWORD PRIORITY_QUEUE_INGRESS PRIORITY_QUEUE_EGRESS HOST_ISOLATION NAT_INGRESS NAT_EGRESS ACK_FILTER_EGRESS RTT AUTORATE_INGRESS EXTRA_PARAMETERS_INGRESS EXTRA_PARAMETERS_EGRESS

    echo "Configuration expanded successfully. You can now edit all available options in $config_file"
}
